package uml2rca.adaptation.association;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.uml2.uml.Association;
import org.eclipse.uml2.uml.Property;

import uml2rca.exceptions.NotAnNaryAssociationException;
import uml2rca.java.uml2.uml.extensions.utility.Associations;

/**
 * an NaryAssociationToBinaryAssociationsAdaptation concrete class that is used to adapt 
 * a UML n-ary association by replacing it with the complete graph of n binary associations
 * between the n types participating in it.<br><br>
 * 
 * @author Bachar Rima
 * @see AbstractNaryAssociationAdaptation
 * @see Association
 */
public class NaryAssociationToBinaryAssociationsAdaptation extends 
	AbstractNaryAssociationAdaptation<List<Association>> {
	
	/* CONSTRUCTOR */
	/**
	 * Creates an n-ary association to binary associations adaptation having source as its source 
	 * n-ary association to adapt, then applies the adaptation to obtain the target binary associations
	 * and cleans the post-adaptation residues.
	 * @param source the source n-ary association to adapt
	 * @throws NotAnNaryAssociationException if the provided source entity is not an n-ary association
	 */
	public NaryAssociationToBinaryAssociationsAdaptation(Association source) 
			throws NotAnNaryAssociationException {
		
		super(source);
	}

	/* METHODS */
	/**
	 * Creates the complete graph of n target binary associations 
	 * between the n types participating in the source n-ary association to adapt
	 */
	@Override
	public List<Association> transform(Association source) {
		
		List<Property> memberEnds = source.getMemberEnds();
		List<Association> binaryAssociations = new ArrayList<>();
		Property iEnd = null, jEnd = null;
		
		for (int i = 0; i < memberEnds.size(); i++) {
			iEnd = memberEnds.get(i);
			
			for (int j = i + 1; j < memberEnds.size(); j++) {
				jEnd = memberEnds.get(j);
				binaryAssociations.add(initTargetBinaryAssociation(
						source, iEnd, jEnd, 
						iEnd.getName() + "-" + source.getName() + "-" + jEnd.getName()));
			}
		}
		
		return binaryAssociations;
	}

	/**
	 * Creates a target binary association between the provided member ends designating types participating
	 * in the source n-ary association to adapt, having the same package as the source n-ary association to
	 * adapt, and named according to the provided name. 
	 * @param source the source n-ary association to adapt
	 * @param firstEnd a member end of a type participating in the source n-ary association to adapt
	 * that'll become the first member end of the target binary association 
	 * @param secondEnd a member end of a type participating in the source n-ary association to adapt
	 * that'll become the second member end of the target binary association 
	 * @param newName a value to name the target binary association
	 * @return the target binary association owned by the same package owning source, named newName, 
	 * and having firstEnd and secondEnd as its member ends
	 */
	private Association initTargetBinaryAssociation(Association source, Property firstEnd, 
			Property secondEnd, String newName) {
		
		Association binaryAssociation = Associations.cloneIntoBinaryAssociation(firstEnd, secondEnd);
		binaryAssociation.setPackage(source.getPackage());
		binaryAssociation.setName(newName);
		
		return binaryAssociation;
	}
	
	/**
	 * Removes the source n-ary association from the model once the complete graph of its
	 * n target binary associations has been created and added to the model to replace it,
	 * and sets the associations generated by this adaptation as its target
	 */
	@Override
	public void postTransform(Association source) {
		source.destroy();
		associations = target;
	}
}
